// @flow
/**
 * Flowtype definitions for interface
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.12.1
 */

export type Universe =
  | "dune"
  | "lord-of-the-rings"
  | "rick-and-morty"
  | "star-wars"
  | "naruto";
declare export var UNIVERSES: Universe[];
export interface INerdataOpts {
  +randomFn?: () => number;
  +include?: Universe | Universe[];
  +exclude?: Universe | Universe[];
}
export type ItemType = "tool" | "vehicle" | "weapon";
export type PlaceType = "city" | "realm";
export type SpeciesType = "nonsentient" | "sentient";
export interface Item {
  +name: string;
  +type: ItemType;
}
export interface Name {
  +first: string;
  +last?: string;
}
export interface NameWithLast {
  +first: string;
  +last: string;
}
export interface Place {
  +name: string;
  +type: PlaceType;
}
export interface Quote {
  +text: string;
  +speaker: string;
}
export interface Species {
  +name: string;
  +type: SpeciesType;
}
export interface UniverseData {
  +places: Place[];
  +items: Item[];
  +names: Name[];
  +species: Species[];
  +quotes: Quote[];
}
export type DataByUniverse = { [key: Universe]: UniverseData, ... };
export type DataOrNullByUniverse = {
  [key: Universe]: UniverseData | null,
  ...
};
